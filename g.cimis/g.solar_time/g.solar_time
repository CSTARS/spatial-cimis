#! /usr/bin/env bash

############################################################################
#
# MODULE:       g.solar_time (Grass 7.4.4)
# AUTHOR(S):    Quinn Hart qjhart at ucdavis
# PURPOSE:      To perform Spatial CIMIS calculations
# COPYRIGHT:    (C) 2018-2019 by Quinn Hart
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: Display various solar time variables for a solar mapset
#%  keywords: CIMIS evapotranspiration
#%End
#%option
#% key: cmd
#% type: string
#% description: Command: solpos | sretr | ssetr | daynight | prev | risedayset | day_parms | sretr_parms | ssetr_parms 
#% multiple: no
#% required: no
#% guisection: Main
#%end
#%option G_OPT_R_MAP
#% key: rast
#% required: no
#%end
#%option G_OPT_M_MAPSET
#% required: no
#%end

if  [ -z "$GISBASE" ] ; then
    echo "You must be in GRASS GIS to run this program."
    exit 1
fi

# save command line
if [ "$1" != "@ARGS_PARSED@" ] ; then
    CMDLINE=`basename "$0"`
    for arg in "$@" ; do
        CMDLINE="$CMDLINE \"$arg\""
    done
    export CMDLINE
    exec g.parser "$0" "$@"
fi

g.message -d message="$CMDLINE"

function fn2t() {
    local t;
    echo $(basename $1) | sed -e 's/PST-.*$//'
}

function cmp() {
    local t1=$(fn2t $1)
    local t2=$(fn2t $2)
    if [[ $t1 < $t2 ]]; then
	echo lt;
    elif [[ $t1 = $t2 ]]; then
	echo eq;
    else echo gt;
    fi;
}

function day_parms() {
    local m=${MAPSET}
    local y=${m%????}
    local md=${m#????}
    local m=${md%??}
    local d=${md#??}
    echo "year=$y month=$m day=$d timezone=-8"
}

function solpos() {
    r.solpos -r $(day_parms)
}

function sretr() {
    solpos | grep sretr_hhmm | cut -d= -f 2 | sed -e 's/://'
}

function ssetr() {
    solpos | grep ssetr_hhmm | cut -d= -f 2 | sed -e 's/://'
}

function sretr_parms() {
    local sretr_hhmm
    eval $(solpos | grep sretr_hhmm)
    echo $(day_parms) hour=${sretr_hhmm%:??} minute=${sretr_hhmm#??:}
}


function ssetr_parms() {
    local ssetr_hhmm
    eval $(solpos | grep ssetr_hhmm)
    echo $(day_parms) hour=${ssetr_hhmm%:??} minute=${ssetr_hhmm#??:}
}

function daynight() {
    local sr
    local ss
    if [[ -n $2 ]]; then
	sr=$2;
    else
	sr=$(sretr)
    fi
    if [[ -n $3 ]]; then
	ss=$2;
    else
	ss=$(ssetr)
    fi
    local cmp=$(cmp $1 $sr)
    if [[ $cmp = "gt" ]]; then
	cmp=$(cmp $1 $ss)
	if [[ $cmp = "lt" ]]; then
	    echo day;
	else
	    echo night
	fi;
    else
	echo night
    fi
}

function prev() {
    local t1=$(fn2t $1)
    local ti
    local prev
    local suffix=${1#????}

    for i in $(g.list type=rast pattern="????${suffix}" | sort); do
	ti=${i%${suffix}}
	if [[ $ti < $t1 ]]; then
	    prev=$i
	else
	    break
	fi
    done
    echo $prev
}

function next() {
    local t1=$(fn2t $1)
    local ti
    local next
    local suffix=${1#????}

    for i in $(g.list type=rast pattern="????${suffix}" | sort -r); do
	ti=${i%${suffix}}
	if [[ $ti > $t1 ]]; then
	    next=$i
	else
	    break
	fi
    done
    echo $next
}

function risedayset() {
    local dn
    local pdn
    dn=$(daynight $1)
    local prev
    pdn="night"
    prev=$(prev $1)
    if [[ -n $prev ]]; then
	pdn=$(daynight $(prev $1))
    fi
    if [[ $dn = 'day' ]]; then
	if [[ $pdn = "night" ]]; then
	    echo sunrise $prev;
	else
	    echo day $prev;
	fi
    else
	if [[ $pdn = "day" ]]; then
	    echo sunset $prev;
	else
	    echo night $prev
	fi
    fi
}

# MAIN
CMD=${GIS_OPT_CMD}
MAPSET=${GIS_OPT_MAPSET:-$(g.gisenv MAPSET)}

case $CMD in
    solpos | sretr | ssetr ) # Directory Commands
	$CMD;
	;;
    day_parms | sretr_parms | ssetr_parms ) # Grass helpers
	$CMD;
	;;
    daynight | prev | next | risedayset ) # Identifiers
	if [[ -z ${GIS_OPT_RAST} ]]; then
	    g.message "$CMD requires raster"
	    exit 1;
	fi;
	$CMD ${GIS_OPT_RAST};
	;;
    *)
	g.message "$CMD not found";
	;;
esac
